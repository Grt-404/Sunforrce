<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Announcements — Sunforce</title>
    <meta name="description" content="Official announcements and updates from the Sunforce Green Energy team."/>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='64' height='64'%3E%3Cdefs%3E%3ClinearGradient id='g' x1='0' y1='0' x2='1' y2='1'%3E%3Cstop offset='0%25' stop-color='%2322C55E'/%3E%3Cstop offset='100%25' stop-color='%2316A34A'/%3E%3C/linearGradient%3E%3C/defs%3E%3Ccircle cx='32' cy='32' r='30' fill='url(%23g)'/%3E%3Ctext x='32' y='42' font-size='32' text-anchor='middle' fill='white' font-family='Arial Black'%3ES%3C/text%3E%3C/svg%3E" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Playfair+Display:wght@700;800&display=swap" rel="stylesheet">

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        background: '#f8f5f2',
                        foreground: '#1f1c18',
                        card: '#ffffff',
                        'card-foreground': '#1f1c18',
                        primary: '#16a34a',
                        'primary-foreground': '#ffffff',
                        secondary: '#22c55e',
                        border: 'rgba(0, 0, 0, 0.08)',
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        serif: ['Playfair Display', 'serif']
                    },
                    boxShadow: {
                        'soft': '0 4px 12px rgba(0, 0, 0, 0.05)',
                        'lift': '0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
                    },
                    keyframes: {
                        'fade-in-up': { '0%': { opacity: 0, transform: 'translateY(20px)' }, '100%': { opacity: 1, transform: 'translateY(0)' } },
                        'backgroundShift': {
                            '0%, 100%': { backgroundPosition: '0% 50%' },
                            '50%': { backgroundPosition: '100% 50%' },
                        }
                    },
                    animation: {
                        'fade-in-up': 'fade-in-up 0.8s ease-out forwards',
                        'backgroundShift': 'backgroundShift 25s ease infinite',
                    }
                }
            }
        }
    </script>

    <style>
        html { scroll-behavior: smooth; }
        body {
            background: linear-gradient(-45deg, #f0fdf4, #f9fafb, #eefbf3, #f9fafb);
            background-size: 400% 400%;
            animation: backgroundShift 25s ease infinite;
        }
        .glass-header {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
            border-bottom: 1px solid var(--tw-color-border);
        }
        #particle-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; opacity: 0.6; }
        .card-hover {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: var(--tw-shadow-lift);
        }
        .like-btn.liked svg {
            fill: #ef4444; /* red-500 */
            color: #ef4444;
        }
        .nav-link {
            transition: all 0.2s ease-in-out;
            border-bottom: 2px solid transparent;
        }
        .nav-link.active, .nav-link:hover {
            color: var(--tw-color-primary);
            border-bottom-color: var(--tw-color-primary);
        }
    </style>
</head>
<body class="bg-background font-sans antialiased text-foreground">
    <canvas id="particle-canvas"></canvas>

    <header class="fixed top-0 inset-x-0 z-40 glass-header">
      <div class="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
        <div class="relative flex h-16 items-center justify-between">
          <a href="/" class="text-3xl font-serif font-bold text-primary">Sunforce</a>
          <a
            href="/logout"
            class="px-4 py-2 rounded-md bg-primary text-primary-foreground hover:bg-green-700 transition-colors font-semibold shadow-soft flex items-center gap-2"
          >
            <i data-lucide="log-out" class="w-4 h-4"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <main class="pt-16">
        <nav class="bg-card border-b border-border px-4 py-2 sticky top-16 z-30">
            <div class="max-w-screen-xl mx-auto flex justify-center items-center">
              <div class="flex gap-4 overflow-x-auto">
                 <a href="/student/dashboard" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="layout-dashboard"></i>Dashboard</a>
                <a href="/student/connections" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="users"></i>Our Team</a>
                <a href="/student/posts" class="nav-link active flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="newspaper"></i>Announcements</a>
                 <a href="/student/map" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="map"></i>Global Reach</a>
                <a href="/student/events" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="calendar"></i>Site Visit Requests</a>
                <a href="/student/profile" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="user-circle"></i>My Profile</a>
              </div>
            </div>
        </nav>

        <div class="pt-8 pb-12">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2 space-y-6">
                    <div class="text-center lg:text-left animate-fade-in-up">
                        <h1 class="text-4xl md:text-5xl font-serif font-bold text-foreground">Company Announcements</h1>
                        <p class="text-gray-500 mt-2">Updates, news, and insights from the Sunforce team.</p>
                    </div>

                    <% if (posts && posts.length) { %>
                        <% posts.forEach((post, index) => { %>
                            <div class="bg-card p-6 rounded-xl shadow-soft card-hover animate-fade-in-up" style="animation-delay: <%= (index + 1) * 100 %>ms">
                                <div class="flex items-center space-x-4 mb-4">
                                    <% if (post.author && post.author.image) { %>
                                        <img src="data:image/jpeg;base64,<%= post.author.image.toString('base64') %>" alt="Author profile picture" class="w-14 h-14 rounded-full object-cover ring-2 ring-primary/20" />
                                    <% } else { %>
                                        <div class="w-14 h-14 rounded-full bg-secondary text-primary-foreground flex items-center justify-center font-bold text-2xl">
                                            <%= post.author && post.author.name ? post.author.name.charAt(0).toUpperCase() : 'A' %>
                                        </div>
                                    <% } %>
                                    <div>
                                        <p class="font-bold text-lg text-foreground"><%= post.author ? post.author.name : 'Sunforce Admin' %></p>
                                        <p class="text-sm text-gray-500"><%= new Date(post.createdAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) %></p>
                                    </div>
                                </div>

                                <p class="text-gray-800 leading-relaxed whitespace-pre-wrap"><%= post.content %></p>

                                <% if (post.image) { %>
                                    <div class="mt-5 rounded-lg overflow-hidden border border-border">
                                        <img src="data:image/jpeg;base64,<%= post.image.toString('base64') %>" alt="Post image" class="w-full h-auto max-h-[500px] object-contain"/>
                                    </div>
                                <% } %>

                                <div class="mt-5 pt-4 border-t border-border flex items-center space-x-6 text-sm">
                                    <% const hasLiked = post.likes.includes(user._id.toString()); %>
                                    <button class="like-btn flex items-center gap-2 text-gray-500 hover:text-red-500 transition-colors <%= hasLiked ? 'liked' : '' %>" data-id="<%= post._id %>">
                                        <i data-lucide="heart" class="w-5 h-5"></i>
                                        <span class="font-medium"><span class="like-count"><%= post.likes.length %></span> Likes</span>
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="bg-card p-8 rounded-xl shadow-soft text-center text-gray-500 animate-fade-in-up">
                            <p>No announcements found. Check back later for updates.</p>
                        </div>
                    <% } %>
                </div>

                <aside class="lg:sticky lg:top-24 self-start space-y-6">
                    <div class="bg-card rounded-xl shadow-soft p-6 animate-fade-in-up" style="animation-delay: 200ms;">
                        <h3 class="text-xl font-serif text-foreground mb-4">Trending Topics</h3>
                        <div class="flex flex-wrap gap-2">
                            <span class="bg-primary/10 text-primary text-sm font-semibold px-3 py-1 rounded-full">#SolarEnergy</span>
                            <span class="bg-primary/10 text-primary text-sm font-semibold px-3 py-1 rounded-full">#Sustainability</span>
                            <span class="bg-primary/10 text-primary text-sm font-semibold px-3 py-1 rounded-full">#EVCharging</span>
                            <span class="bg-primary/10 text-primary text-sm font-semibold px-3 py-1 rounded-full">#GreenTech</span>
                        </div>
                    </div>
                     <div class="bg-card rounded-xl shadow-soft p-6 animate-fade-in-up" style="animation-delay: 300ms;">
                        <h3 class="text-xl font-serif text-foreground mb-4">Project Analytics</h3>
                         <div class="space-y-4">
                             <div>
                                 <div class="flex justify-between text-sm mb-1"><span class="font-semibold">Projects Completed</span><span>1,204</span></div>
                                 <div class="w-full bg-gray-200 rounded-full h-2"><div class="bg-secondary h-2 rounded-full" style="width: 75%"></div></div>
                             </div>
                             <div>
                                 <div class="flex justify-between text-sm mb-1"><span class="font-semibold">Active Consultations</span><span>89</span></div>
                                 <div class="w-full bg-gray-200 rounded-full h-2"><div class="bg-secondary h-2 rounded-full" style="width: 50%"></div></div>
                             </div>
                         </div>
                    </div>
                </aside>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();

            const animatedElements = document.querySelectorAll('.animate-fade-in-up');
            const animationObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const delay = entry.target.style.animationDelay || '0s';
                        entry.target.style.transition = `opacity 0.6s ease-out ${delay}, transform 0.6s ease-out ${delay}`;
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                        animationObserver.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            animatedElements.forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                animationObserver.observe(el);
            });

            document.querySelectorAll(".like-btn").forEach((button) => {
                button.addEventListener("click", async () => {
                    const postId = button.getAttribute("data-id");
                    try {
                        const res = await fetch(`/post/like/${postId}`, { method: "POST" });
                        const data = await res.json();
                        
                        const likeCountSpan = button.querySelector('.like-count');
                        if (likeCountSpan) {
                            likeCountSpan.textContent = data.likesCount;
                        }
                        button.classList.toggle('liked', data.liked);

                    } catch (err) {
                        console.error("❌ Error toggling like:", err);
                    }
                });
            });

            const canvas = document.getElementById('particle-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let particles = [];
            const particleColor = 'rgba(22, 163, 74, 0.4)';

            class Particle {
                constructor(x, y) { this.x = x; this.y = y; this.size = Math.random() * 1.5 + 1; this.speedX = Math.random() * 0.3 - 0.15; this.speedY = Math.random() * 0.3 - 0.15; }
                update() { this.x += this.speedX; this.y += this.speedY; if (this.size > 0.1) this.size -= 0.005; }
                draw() { ctx.fillStyle = particleColor; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); }
            }
            function initParticles() {
                for (let i = 0; i < 50; i++) { particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
            }
            function animateParticles() {
                if (!canvas) return;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < particles.length; i++) {
                    particles[i].update();
                    particles[i].draw();
                    if (particles[i].size <= 0.1) { particles.splice(i, 1); i--; particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
                }
                requestAnimationFrame(animateParticles);
            }
            initParticles();
            animateParticles();

            window.addEventListener('resize', () => { 
                if(canvas){
                    canvas.width = window.innerWidth; 
                    canvas.height = window.innerHeight; 
                    particles = []; 
                    initParticles(); 
                }
            });
        });
    </script>
</body>
</html>