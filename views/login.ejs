<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Login — Sunforce Green Energy</title>
    <meta name="description" content="Access the Sunforce Green Energy client portal."/>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='64' height='64'%3E%3Cdefs%3E%3ClinearGradient id='g' x1='0' y1='0' x2='1' y2='1'%3E%3Cstop offset='0%25' stop-color='%2310B981'/%3E%3Cstop offset='100%25' stop-color='%23059669'/%3E%3C/linearGradient%3E%3C/defs%3E%3Ccircle cx='32' cy='32' r='30' fill='url(%23g)'/%3E%3Ctext x='32' y='42' font-size='32' text-anchor='middle' fill='white' font-family='Arial Black'%3ES%3C/text%3E%3C/svg%3E" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Playfair+Display:wght@700;800&display=swap" rel="stylesheet">

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        background: '#F9FAFB',
                        foreground: '#1F2937',
                        card: '#FFFFFF',
                        primary: '#059669', // Darker Emerald
                        'primary-foreground': '#FFFFFF',
                        secondary: '#10B981', // Lighter Emerald
                        border: 'rgba(0, 0, 0, 0.08)',
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        serif: ['Playfair Display', 'serif']
                    },
                    boxShadow: {
                        'soft': '0 4px 12px rgba(0, 0, 0, 0.05)',
                        'lift': '0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
                    },
                    keyframes: {
                        'fade-in-up': { '0%': { opacity: 0, transform: 'translateY(20px) scale(0.98)' }, '100%': { opacity: 1, transform: 'translateY(0) scale(1)' } },
                        'ken-burns': { '0%': { transform: 'scale(1) rotate(0deg)', }, '100%': { transform: 'scale(1.1) rotate(1deg)' } }
                    },
                    animation: {
                        'fade-in-up': 'fade-in-up 0.8s ease-out forwards',
                        'ken-burns': 'ken-burns 20s ease-out forwards',
                    }
                }
            }
        }
    </script>

    <style>
        .glass-card {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(16px); -webkit-backdrop-filter: blur(16px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px 0 rgba(16, 185, 129, 0.15);
        }
        #particle-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; opacity: 0.5; }
        .bg-slide {
            position: absolute;
            inset: -5%;
            width: 110%;
            height: 110%;
            background-size: cover;
            background-position: center;
            transition: opacity 1.5s ease-in-out;
            animation: ken-burns 20s infinite alternate ease-in-out;
        }
        .cta-button {
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.2), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3), 0 3px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="bg-background font-sans antialiased text-foreground">
    <canvas id="particle-canvas"></canvas>
    
    <div id="bg-slider" class="fixed inset-0 z-[-2] overflow-hidden">
        <div class="absolute inset-0 bg-black/50"></div>
    </div>

    <main class="min-h-screen flex items-center justify-center p-4">
        <div class="w-full max-w-md glass-card rounded-2xl p-8 md:p-12 animate-fade-in-up">
            <div class="text-center">
                 <a href="/" class="text-4xl font-serif font-bold text-primary inline-block mb-4">Sunforce</a>
                <h2 class="text-3xl font-serif font-bold text-foreground">Welcome Back</h2>
                <p class="text-gray-500 mt-2">Access your client & admin portal.</p>
            </div>
            
            <form action="/login" method="POST" class="mt-8 space-y-6">
                <div>
                    <label for="email" class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                    <input type="email" name="email" id="email" placeholder="you@example.com" class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary transition-shadow bg-white/50" required>
                </div>

                <div>
                    <label for="password" class="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                    <input type="password" name="password" id="password" placeholder="••••••••" class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary transition-shadow bg-white/50" required>
                </div>
                
                <div class="pt-2">
                    <button type="submit" class="w-full py-3 bg-primary text-primary-foreground rounded-lg font-bold uppercase tracking-wider cta-button">Login</button>
                </div>
            </form>

            <p class="mt-8 text-center text-sm text-gray-600">
                Don't have an account? <a href="/register" class="font-semibold text-primary hover:underline">Create one</a>
            </p>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();

             // --- Background Slider ---
            const bgSlider = document.getElementById('bg-slider');
            const images = [
                'https://images.pexels.com/photos/31767621/pexels-photo-31767621.jpeg',
                'https://images.pexels.com/photos/30201600/pexels-photo-30201600.jpeg',
                'https://images.pexels.com/photos/7498498/pexels-photo-7498498.jpeg',
                'https://images.pexels.com/photos/29683816/pexels-photo-29683816.jpeg'
            ];
            let currentImageIndex = 0;

            function createSlide(imageUrl, index) {
                const slide = document.createElement('div');
                slide.className = 'bg-slide';
                slide.style.backgroundImage = `url('${imageUrl}')`;
                slide.style.opacity = index === 0 ? '1' : '0';
                slide.style.animationDirection = index % 2 === 0 ? 'normal' : 'reverse';
                bgSlider.prepend(slide);
                return slide;
            }

            const slides = images.map(createSlide);

            function nextSlide() {
                const nextImageIndex = (currentImageIndex + 1) % images.length;
                slides[currentImageIndex].style.opacity = '0';
                slides[nextImageIndex].style.opacity = '1';
                currentImageIndex = nextImageIndex;
            }

            setInterval(nextSlide, 7000);
            
            // --- Particle Animation Script ---
            const canvas = document.getElementById('particle-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let particles = [];
            const particleColor = 'rgba(16, 185, 129, 0.4)'; // Emerald Green particles

            class Particle {
                constructor(x, y) { this.x = x; this.y = y; this.size = Math.random() * 1.5 + 1; this.speedX = Math.random() * 0.4 - 0.2; this.speedY = Math.random() * 0.4 - 0.2; }
                update() { this.x += this.speedX; this.y += this.speedY; if (this.size > 0.1) this.size -= 0.005; }
                draw() { ctx.fillStyle = particleColor; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); }
            }
            function initParticles() {
                for (let i = 0; i < 50; i++) { particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
            }
            function animateParticles() {
                if (!canvas) return;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < particles.length; i++) {
                    particles[i].update(); particles[i].draw();
                    if (particles[i].size <= 0.1) { particles.splice(i, 1); i--; particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
                }
                requestAnimationFrame(animateParticles);
            }
            initParticles();
            animateParticles();

            window.addEventListener('resize', () => { 
                if(canvas){
                    canvas.width = window.innerWidth; 
                    canvas.height = window.innerHeight; 
                    particles = []; 
                    initParticles(); 
                }
            });
        });
    </script>
</body>
</html>